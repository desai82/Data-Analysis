# -*- coding: utf-8 -*-
"""ADT_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M9hlV0VWMcpvzBDoEfUGdrPZyouaOt8u
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

"""**Importing Dataset**"""

a=pd.read_csv('/content/Dataset/merc.csv')
a.head()

"""Transforming the csv file to **DataFrame**"""

df=pd.DataFrame(a)
df

"""**Renaming the Column Name**"""

df=df.rename(columns={'model':'Model','year':'Year','price':'Price','transmission':'Transmission','mileage':'Mileage','fuelType':'FuelType','tax':'Tax','mpg':'Miles_per_gallon','engineSize':'Engine_Size'})

df

"""**Comparing Model vs Price**"""

Model_Price=df[['Model','Price']]
Model_Price

plt.figure(figsize=(20,8),dpi=80)
ax=plt.axes()
ax.set_facecolor('white')
plt.bar(Model_Price['Model'],Model_Price['Price'],color='red')
plt.scatter(Model_Price['Model'],Model_Price['Price'],s=100,color='green')

plt.title('Comparison with Model and Price in the given Dataset',color='blue',fontsize=25)
plt.xticks(rotation=50,color='blue')
plt.yticks(color='blue')
plt.xlabel('Name of the Model',color='blue',fontsize=20)
plt.ylabel('Price of the Specific Model',color='blue',fontsize=20)
plt.show()

"""**Analysis Using the Year**"""

Year_Price_Year=df[['Model','Year','Price']]
Year_Price_Year

fig = px.scatter_3d(Year_Price_Year, 
        x='Model', y='Year', z='Price',
        color="Price", hover_data=['Price'])
fig.show()

import plotly.graph_objects as go
fig = go.Figure(data=[go.Mesh3d(x=(Year_Price_Year.Model),
                   y=(Year_Price_Year.Year),
                   z=(Year_Price_Year.Price),
                   opacity=0.5,
                   color='rgba(244,22,100,0.6)'
                  )])
fig.show()

"""**Different model price varies acoording to differnet year**"""

df.sample(frac=1).head()

"""**Total Sale in particular Year for every Model**"""

df[['Model','Year']]
a=df['Year'].value_counts()
b=pd.DataFrame(a)
b

plt.figure(figsize=(16,8),dpi=80)
ax=plt.axes()
ax.set_facecolor('white')
plt.bar(b.index,b['Year'],color='red')
plt.scatter(b.index,b['Year'],s=100,color='green')
plt.title('Analysis of Year with No of Cars Released in various models in the particular Year',color='blue',fontsize=25)
plt.xlabel('Year Range',color='blue',fontsize=20)
plt.ylabel('No of Cars Released in various models',color='blue',fontsize=20)
plt.xticks(color='blue',fontsize=20)
plt.yticks(color='blue',fontsize=20)
plt.show()

"""**Analysis with Transmission**"""

df[['Model','Price','Transmission']]

df['Transmission'].value_counts()

print(df['Transmission'].value_counts())
print(df['Price'].min())
print(df['Price'].max())

plt.figure(figsize=(16,8),dpi=80)
aa=pd.DataFrame({'Semi-Auto':6848,'Automatic':4825,'Manual':1444,'Other':2},index=[0]).T
plt.pie(x=aa[0],explode=(0.1,0.1,0.1,0.1),autopct='%1.1f%%',shadow=True,startangle=360)
plt.title('Exploration on percentage of Cars of various Transmission',fontsize=25,color='blue')
plt.show()

Semi_Auto=6848
Automatic=4825
Manual=1444
Other=2
Total_Number_of_units_manufactured=13119
print('Percentage of Semi-Automatic Mercedes Cars is:',(Semi_Auto/Total_Number_of_units_manufactured)*100)
print()
print('Percentage of Automatic Mercedes Cars is:',(Automatic/Total_Number_of_units_manufactured)*100)
print()
print('Percentage of Manual Mercedes Cars is:',(Manual/Total_Number_of_units_manufactured)*100)
print()
print('Percentage of Other Mercedes Cars is:',(Other/Total_Number_of_units_manufactured)*100)

"""**Analysis with Transmissions and Mileage**"""

Semi_Auto_df=df[df['Transmission']=='Semi-Auto']
Automatic_df=df[df['Transmission']=='Automatic']
Manual_df=df[df['Transmission']=='Manual']
Other=df[df['Transmission']=='Other']
print(Semi_Auto_df[['Transmission','Mileage']])

print(Automatic_df[['Transmission','Mileage']])
print(Manual_df[['Transmission','Mileage']])
print(Other[['Transmission','Mileage']])

print('Average Mileage of Cars with Semi-Auto Transmission',np.mean(Semi_Auto_df['Mileage']))
print('Min Mileage of Semi_Auto Transmission Cars',Semi_Auto_df['Mileage'].min())
print('Max Mileage of Semi_Auto Transmission Cars',Semi_Auto_df['Mileage'].max())
print('*******')
print()
print('Average Mileage of Cars with Automatic Transmission',np.mean(Automatic_df['Mileage']))
print('Min Mileage of Automatic Transmission Cars',Automatic_df['Mileage'].min())
print('Max Mileage of Automatic Transmission Cars',Automatic_df['Mileage'].max())
print('*******')
print()
print('Average Mileage of Cars with Manual Transmission',np.mean(Manual_df['Mileage']))
print('Min Mileage of Manual Transmission Cars',Manual_df['Mileage'].min())
print('Max Mileage of Manual Transmission Cars',Manual_df['Mileage'].max())
print('*******')
print()
print('Average Mileage of Cars with Other types Transmission',np.mean(Other['Mileage']))
print('Min Mileage of Other types Transmission Cars',Other['Mileage'].min())
print('Max Mileage of Other types Transmission Cars',Other['Mileage'].max())
print('*******')

sns.set(style="darkgrid")
plt.figure(figsize=(10,10))
sns.barplot(x='Model',y='Price',data=Model_Price)
plt.xticks(rotation=90)

plt.figure(figsize=(20,10))
sns.countplot(x="Model", hue="FuelType", data=df) 
plt.xticks(rotation=90)
plt.title("Most used fuel types")
plt.show()

"""**Milage According to Fuel Type**"""

plt.figure(figsize=(14,4))
df.groupby('FuelType')['Miles_per_gallon'].mean().plot.barh()

"""**Cars that produced after 2005 and have mileage less that 100000**"""

df[(df['Year']>2005) & (df['Mileage']<100000)]

"""**Clearing Data with Engine Size 0**"""

engine_0 = df[df['Engine_Size'] == 0.0]
engine_0

"""**Sum of Price According to Class**"""

avg = sum(df.Price)/len(df.Price)
print(avg)
df["price_level"] = ["A_class" if i > avg else "B_class" for i in df.Price]
df.loc[:10,["price_level","Price"]]

"""**Tax level according to Model**"""

avg_tax = sum(df.Tax)/len(df.Tax)
print(avg_tax)
df["tax_level"] = ["high" if i > avg else "low" for i in df.Price]
df.loc[:10,["tax_level","Tax","Model"]]

"""**Tax Calculation according to Model**"""

price_engine=df[['Engine_Size','Price']]

"""**Comparision of Engine_Size and Price**"""

price_engine

df.head(10)

plt.figure(figsize=(20,8),dpi=80)
ax=plt.axes()
ax.set_facecolor('white')
plt.bar(price_engine['Engine_Size'],price_engine['Price'],color='red')
plt.scatter(price_engine['Engine_Size'],price_engine['Price'],s=100,color='green')

plt.title('Comparison of Price with engine Size',color='blue',fontsize=25)
plt.xticks(rotation=50,color='blue')
plt.yticks(color='blue')
plt.xlabel('Engine_Size',color='blue',fontsize=20)
plt.ylabel('Price',color='blue',fontsize=20)
plt.show()

"""**Visualise of Engine Size**"""

x = df['Model']
y = df['Engine_Size']

plt.stem(x, y)
plt.xticks(rotation=90)
plt.title('Engine Size')
plt.show()

"""**Percentile according to different category**"""

(df.describe(percentiles=[.01, .25, .5, .75, .99]).apply( 
    lambda s: s.apply('{0:.2f}'.format)))

"""**Describing data according to FuelType**"""

df['FuelType'].unique()

df['FuelType'] = df['FuelType'].replace('Hybrid','Other')

df['FuelType'].unique()

fuels = pd.DataFrame(df['FuelType'].value_counts()) 
group = df.groupby(df['FuelType']) 
mean_price = pd.DataFrame(group.Price.mean())
fuels.reset_index(level=0, inplace=True) 
fuels.columns = ('FuelType', 'size') 
fuels = pd.merge(fuels,mean_price,how='left', on='FuelType') 
 
labels = ["%s\n%d items\nMean price: %dâ‚¬"% (label) for label in 
    zip(fuels['FuelType'], fuels['size'], fuels['Price'])] 
fig1, ax1 = plt.subplots() 
ax1.pie(fuels['size'], labels=labels, 
    autopct='%1.1f%%', startangle=50, colors=plt.cm.Set1.colors) 
ax1.axis('equal') 
plt.title("Percentage of Fuels ")
plt.show()

"""**From pie chart of fuels I found that most of the models use Diesel(70%)**

**Miles per Galon**
"""

ax = sns.barplot(x="Miles_per_gallon", y="Model", data=df)
plt.title("Miles per gallon")

